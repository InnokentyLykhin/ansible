---
- hosts: app 
  gather_facts: true
  vars:
    packets_ubuntu: ["aptitude", "ca-certificates", "curl", "software-properties-common"]
    packets_centos: ["ca-certificates", "curl", "yum-utils"]
  become: true  
  tasks:
    - name: Install required system packages ubuntu
      apt: name="{{ item }}" state=latest update_cache=yes
      loop: "{{ packets_ubuntu }}"
      when: ansible_distribution == "Ubuntu" 
    - name: Install required system packages centos
      yum: name="{{ item }}" state=latest update_cache=yes
      loop: ["{{ packets_centos }}"]
      when: ansible_distribution == "CentOS"
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == "Ubuntu" 
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
      when: ansible_distribution == "Ubuntu"  
    - name: Install docker-ce ubuntu
      apt: update_cache=yes name=docker-ce state=latest
      when: ansible_distribution == "Ubuntu"
    - name: Get repo docker-ce centos
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_distribution == "CentOS" 
    - name: Install docker-ce centos
      package:
        name: docker-ce
        state: latest
      when: ansible_distribution == "CentOS"  
    - name: start docker
      service: name=docker state=started
    
- hosts: database
  gather_facts: true
  vars:
    packets_db: ["postgresql-contrib", "libpq-dev", "python3-psycopg2"]
    postgresql_pack_name: "postgresql-10"
    data_dir: "/home/data"
  become: true
  tasks:
    - name: install postgresql deps
      apt: name="{{ item }}" update_cache=true state=latest
      loop: "{{packets_db}}"
    - name: install postgresql
      apt: name="{{ postgresql_pack_name }}" update_cache=true state=latest
    - name: check data_dir exist
      stat:
        path: "{{ data_dir }}"
      register: check_data_dir
    - name: create data directory
      shell: "mkdir {{ data_dir }}"
      when: not check_data_dir.stat.exists 
    - name: change db data_dir   
      shell: "pg_conftool set data_directory {{ data_dir }}" 
    - name: start postgresql_service
      service: name=postgresql state=started
